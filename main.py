import os
import csv
import datetime
import pandas as pd
import requests
from io import StringIO
from flask import Flask, request, send_file
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext

app = Flask(__name__)

TOKEN           = os.getenv("TOKEN")
SELF_URL        = os.getenv("SELF_URL")
ZONES_CSV_URL   = os.getenv("ZONES_CSV_URL")    # CSV‚ÄëURL —Ç–∞–±–ª–∏—Ü—ã –∑–æ–Ω (ID,Region)
REES_SHEETS_MAP = {
    p.split("=",1)[0]: p.split("=",1)[1]
    for p in os.getenv("REES_SHEETS_MAP","").split(",") if p
}

bot         = Bot(token=TOKEN)
dispatcher  = Dispatcher(bot, None, use_context=True)
user_states = {}

LOGS_FILE = "logs.csv"
if not os.path.exists(LOGS_FILE):
    with open(LOGS_FILE, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["user_id", "timestamp", "number"])

def load_zones_map():
    r = requests.get(ZONES_CSV_URL); r.raise_for_status()
    df = pd.read_csv(StringIO(r.text), dtype=str)
    return dict(zip(df["ID"].str.strip(), df["Region"].str.strip()))

def log_request(user_id, number):
    ts = datetime.datetime.now().isoformat()
    with open(LOGS_FILE, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([user_id, ts, number])

def load_data(excel_url):
    r = requests.get(excel_url); r.raise_for_status()
    return pd.read_excel(pd.io.common.BytesIO(r.content), dtype=str)

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞")

def handle_message(update: Update, context: CallbackContext):
    user_id  = str(update.message.from_user.id)
    text_raw = update.message.text.strip()

    # –®–∞–≥ 1: –∑–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω
    try:
        zones = load_zones_map()
        update.message.reply_text("‚úÖ –ó–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        return update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–æ–Ω: {e}")

    # –®–∞–≥ 2: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
    region = zones.get(user_id)
    if not region:
        return update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∏ –≤ –æ–¥–∏–Ω –†–≠–°.")
    update.message.reply_text(f"‚úÖ –†–µ–≥–∏–æ–Ω –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: {region}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    if text_raw in (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–∏–±–æ—Ä—É —É—á—ë—Ç–∞"
    ):
        state = user_states.get(user_id)
        if not state:
            return update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Å—á—ë—Ç—á–∏–∫–∞")
        return send_info(update, state["number"], text_raw, state["region"])

    # –®–∞–≥ 3: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞
    norm_input = text_raw.lstrip("0") or "0"
    update.message.reply_text(f"üîé –ò—â—É —Å—á—ë—Ç—á–∏–∫: {text_raw} ‚Üí {norm_input}")

    # –®–∞–≥ 4: –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞
    found_reg = None
    matched   = None
    try:
        if region.upper() == "ALL":
            for reg, url in REES_SHEETS_MAP.items():
                df  = load_data(url)
                ser = df["–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞"].astype(str)
                norm = ser.str.lstrip("0").replace("", "0")
                mask = norm == norm_input
                if mask.any():
                    found_reg = reg
                    matched   = ser[mask].iloc[0]
                    break
        else:
            url = REES_SHEETS_MAP.get(region)
            df  = load_data(url)
            ser = df["–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞"].astype(str)
            norm = ser.str.lstrip("0").replace("", "0")
            mask = norm == norm_input
            if mask.any():
                found_reg, matched = region, ser[mask].iloc[0]
        if not found_reg:
            return update.message.reply_text("‚ùå –°—á—ë—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        update.message.reply_text(f"‚úÖ –°—á—ë—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {matched} –≤ –†–≠–° ¬´{found_reg}¬ª")
    except Exception as e:
        return update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

    # –®–∞–≥ 5: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        log_request(user_id, matched)
        update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–≥–∞—Ö")
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    user_states[user_id] = {"number": matched, "region": found_reg}
    keyboard = [
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É"],
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"],
        ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–∏–±–æ—Ä—É —É—á—ë—Ç–∞"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

def send_info(update: Update, number: str, info_type: str, region: str):
    try:
        df  = load_data(REES_SHEETS_MAP[region])
        row = df[df["–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞"].astype(str) == number]
        if row.empty:
            return update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        return update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    if info_type == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É":
        cols = ["–¢–£","–ù–æ–º–µ—Ä –¢–£–°–¢–ï–ö","–ù–æ–º–µ—Ä –¢–£","–õ–° / –õ–° –°–¢–ï–ö",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞","–í–∏–¥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è","–°—É–±–∞–±–æ–Ω–µ–Ω—Ç"]
    elif info_type == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è":
        cols = ["–°–µ—Ç–µ–≤–æ–π —É—á–∞—Å—Ç–æ–∫","–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç","–£–ª–∏—Ü–∞","–î–æ–º","–¢–ü"]
    else:
        cols = [
            "–ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞","–°–æ—Å—Ç–æ—è–Ω–∏–µ –¢–£","–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å","–í–∏–¥ —Å—á–µ—Ç—á–∏–∫–∞","–§–∞–∑–Ω–æ—Å—Ç—å",
            "–ì–æ—Å–ø–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞","–ú–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ü–£","–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –¥–∞—Ç–∞","–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–∞—Ç–∞",
            "–ü–µ—Ä–≤–∏—á–Ω—ã–π —Ç–æ–∫ –¢–¢ (–ê)","–ì–æ—Å–ø–æ–≤–µ—Ä–∫–∞ –¢–¢ (–ê)","–ú–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¢–¢"
        ]
    data = row.iloc[0]
    msg  = "\n".join(f"{c}: {data.get(c,'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}" for c in cols)
    update.message.reply_text(msg)

@app.route("/webhook", methods=["POST"])
def webhook():
    upd = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(upd)
    return "ok"

@app.route("/download_logs", methods=["GET"])
def download_logs():
    return send_file(
        LOGS_FILE,
        as_attachment=True,
        attachment_filename="logs.csv",
        mimetype="text/csv"
    )

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

if __name__ == "__main__":
    bot.set_webhook(f"{SELF_URL}/webhook")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
